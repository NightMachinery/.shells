:PROPERTIES:
:ID:       6fffffe6-4745-438b-aeae-f78433ea8400
:END:
#+TITLE: Minimal Server

* @links
** [[id:827ff9a8-8709-4015-9355-aca48ae85c64][minse]]

* steps
** [[id:a802bc74-36e7-4bb7-a3a7-a89a5efece52][Add User]]

** Tangle this page.
*** [help:org-babel-tangle]

** rsync (rsp) necessary files
#+begin_src zsh :eval never
cat "${NIGHTDIR}/setup/minimal_proxy/tangled/rsp_inject_host.zsh" | eval-on-fullhosts
#+end_src

#+name: rsp_1
#+begin_src zsh :eval never
rsp-safe --rsync-path="mkdir -p ~/base/bootstrap && rsync" "${nightNotesPublic}"/cheatsheets/OS/unix/tangled/*(D) ${fullhost}:base/bootstrap/

rsp-safe ~/.tmux.conf ~/.inputrc "${NIGHTDIR}/setup/minimal_proxy"/**/*.(el|zsh|zshenv|zshrc|bash_profile|bashrc|bash|sh|curlrc)(D) ${fullhost}:

rsp-safe "$nightNotesPrivate"/configs/minse/{.private.env.zsh,.secret-private-config.el} ${fullhost}:

rsp-safe --rsync-path="mkdir -p ~/bin && rsync" "$NIGHTDIR/python/telegram-send/tsend.py" "$NIGHTDIR/perllang/ssh_password_auth_disable.pl" ${fullhost}:bin/

rsp-safe2 ${fullhost}:bin/ $NIGHTDIR/perllang/url_dir_count.pl $NIGHTDIR/python/torch_cat.py
#+end_src


#+begin_src zsh :noweb yes :eval never :tangle tangled/rsp_with_host.zsh
# host=t21
# host=t31
# host=c0
host=pino
# host=m17-hpc
# host=m15-hpc
# host=mmd1

# fullhost=$user@$host
fullhost=$host

<<rsp_1>>
#+end_src

#+begin_src zsh :noweb yes :eval never :tangle tangled/rsp_inject_host.zsh
<<rsp_1>>
#+end_src

** On the destination server:
*** @root
**** Sync datetime if needed.
***** [[id:5aa32083-1c7d-4ba4-a40a-e5c6f183e661][time/sync]]

**** [[id:9950dc25-c88f-4660-b059-6302af531c03][apt]]

*** You should run the next steps in =tmux=.
#+begin_src zsh :eval never
tmux new -s setup zsh
#+end_src

*** Run =bash bootstrap_minimal.bash=

*** Run next steps in Zsh.
#+begin_src zsh :eval never
exec zsh
#+end_src

*** Setup a proxy.
#+begin_src zsh :eval never
export-from-alias pxa2096
#+end_src

*** [[id:cf6c92c4-bf55-4534-9064-13fb1a80a874][brew]]
**** This will be slow without a proxy.

*** =zsh bootstrap_with_proxy.zsh=

*** Setup other stuff.
**** [[id:d565cc4f-728e-45bf-8554-d03670fa2707][SSH/setup, keygen]]
#+begin_src zsh :eval never
ssh-keygen
#+end_src

***** Add public key to =batbone=.

**** jupyter
***** [[id:991aa765-f5de-4022-9910-1e42797edc34][Setting a password on the Jupyter server]]

***** [[id:a2001dcf-9d97-467b-b8c5-929e728d6d7c][Install the current env as a kernel with a custom name]]

**** =DecompV/setup.zsh=

**** =.privateShell=
***** You might want to disable using shared HF and conda on a server:
#+begin_src zsh :eval never
##
unset HF_HOME

unset ANACONDA
path-rm '/opt/anaconda3/bin'
##
#+end_src

These are usually set up in:
#+begin_src zsh :eval never
‚ùØ sudo cat /etc/environment
HF_HOME=/opt/huggingface
ANACONDA=/opt/anaconda3
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/opt/anaconda3/bin:"
#+end_src

***** @retired
****** [[id:b4ad4e80-aa83-459b-87f0-07d1e5b22f0e][@PATH =micromamba=]]

****** TQDM and Telegram tokens

**** Test SSH port forwarding:
#+begin_src zsh :eval never
bell-call-remote bell-lm-timetoparty
#+end_src

**** Add proxy and jupyter to cron

* Add User
:PROPERTIES:
:visibility: folded
:ID:       a802bc74-36e7-4bb7-a3a7-a89a5efece52
:END:
#+begin_example zsh
function sudoer-add-user {
  local user="${1:?}"
  sudo perl - "$user" << 'EOF'
use strict;
use warnings;
use File::Temp 'tempfile';

# Get the user from command line arguments
my $user = $ARGV[0];

# Path to the sudoers file
my $sudoers_file = '/etc/sudoers';

# The line to add
my $line_to_add = "$user ALL=(ALL:ALL) ALL";

# Create a temporary file
my ($fh, $filename) = tempfile();

# Open the sudoers file
open my $in, '<', $sudoers_file or die $!;

# Flag to check if the line is already in the file
my $found = 0;

while (<$in>) {
    # If the line is found, set the flag
    if ($_ =~ /^$line_to_add$/) {
        $found = 1;
    }

    # Write the line to the temporary file
    print $fh $_;
}

# If the line was not found, add it
if (not $found) {
    print $fh "$line_to_add\n";
}

close $in;
close $fh;

# Use visudo to check and move the file
system("visudo -c -f $filename") == 0 or die $!;

# If the check was successful, replace the sudoers file
rename $filename, $sudoers_file or die $!;
EOF
}
#+end_example

* install
#+begin_src zsh :eval never :tangle tangled/bootstrap_minimal.bash
set -exo pipefail
##
function micromamba-setup {
    #: @duplicateCode/0d387fd1a8cb09e91286067c039ffd2a
    #: @noninteractive
    ##
    INIT_YES=n \
        </dev/null bash <(curl -L micro.mamba.pm/install.sh)

    export PATH="${HOME}/.local/bin:${PATH}"
    micromamba config append channels conda-forge --env
    micromamba self-update

    micromamba create --yes -c conda-forge --name p310 python=3.10 numpy 

    #: To activate the newly created environment:
    source ~/.shared.sh 
}

function gost-setup {
    #: @duplicateCode/677fcfc72b5b857e88b4687a1824e9e3
    ##
    mkdir -p ~/bin/
    wget -O - 'https://github.com/ginuerzh/gost/releases/download/v2.11.5/gost-linux-amd64-2.11.5.gz' | gunzip -c > ~/bin/gost

    chmod +x ~/bin/gost
    # sudo setcap 'cap_net_bind_service=+ep' "$(realpath ~/bin/gost)"
}

function tpix-setup {
    #: @duplicateCode/12c0863cd8154859380fdff56d92b647
    ##
    mkdir -p ~/bin/
    wget -O - 'https://github.com/jesvedberg/tpix/releases/download/v1.0.0/tpix-1.0.0-x86_64-linux.tar.gz' | tar -xzf - -C ~/bin tpix
    #: `tpix` at the end specifies the specific file to be extracted from the archive. Only the `tpix` file will be extracted and placed in the `~/bin` directory.

    chmod +x ~/bin/tpix
}
##

command sh -c "$(wget -O- https://raw.githubusercontent.com/romkatv/zsh-bin/master/install)" -- -d ~/.local -e no

mkdir -p ~/.local/bin
curl -sS https://starship.rs/install.sh | sh -s -- -b ~/.local/bin -y

curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash

gost-setup
tpix-setup

micromamba-setup

curl -LsSf https://astral.sh/uv/install.sh | INSTALLER_NO_MODIFY_PATH=1 INSTALLER_PRINT_VERBOSE=1 sh

##

#+end_src

** [[id:7be66ef4-f0a4-49c9-9d61-fce8ead929c2][zsh/install]]

** [[id:6de074b1-51c0-4282-9dac-4056c60978c8][starship/starship: ‚òÑüååÔ∏è The minimal, blazing-fast, and infinitely customizable prompt for any shell!]]

** [[id:d139edf6-3aa9-46fb-8da3-3c68eb3885a5][ajeetdsouza/zoxide: A smarter cd command. Supports all major shells.]]

** [[id:4290bea9-23d5-4359-84e1-4e0d091ebad6][@install micromamba]]

** [[id:7e269ee3-69ef-4809-95ec-fa33b0aad996][@install =uv=]]

** [[id:e85ddd44-c6d6-4c2e-acbe-0def717987b8][@good GitHub - XuehaiPan/nvitop: An interactive NVIDIA-GPU process viewer, the one-stop solution for GPU process management.]]

** [[id:3eed54eb-4ff0-4c77-8d87-7ade88f9fdb4][@install gost]]

** available on brew
*** [[id:dab96609-f540-46ba-adf8-2aeaa46a0002][Release nnn v4.9 Elixir ¬∑ jarun/nnn]]

* [[id:cef1b558-0642-4d7e-b94b-b357e2e6bf48][Adding a new SSH key to your GitHub account - GitHub Docs]]

* [[https://github.com/webinstall/webi-installers][webinstall/webi-installers: Primary and community-submitted packages for webinstall.dev]]
** [[https://github.com/webinstall/webi-installer-requests/issues?q=+sort%3Aupdated-desc+author%3ANightMachinery+][Issues ¬∑ webinstall/webi-installer-requests]]

** setting up the PATH for =webi= installed binaries
#+begin_example zsh
source ~/.config/envman/PATH.env
#+end_example

** others
#+begin_src zsh :eval never :tangle tangled/bootstrap_with_proxy.zsh
set -exo pipefail
##

## WebI
#: @proxyNeeded

curl -sS https://webi.sh/webi | sh

curl -sS https://webi.sh/golang | sh
curl -sS https://webi.sh/go-essentials | sh

# curl -sS https://webi.sh/ffmpeg | sh
#: ffmpeg via webi has broken
#: - [jalali:1403/04/11/16:29]

curl -sS https://webi.sh/gh | sh
curl -sS https://webi.sh/rg | sh
curl -sS https://webi.sh/fd | sh
curl -sS https://webi.sh/fzf | sh
curl -sS https://webi.sh/jq | sh


#: @NA :
# curl -sS https://webi.sh/eza | sh
# curl -sS https://webi.sh/nnn | sh
# curl -sS https://webi.sh/ugrep | sh
# curl -sS https://webi.sh/ncdu | sh
# curl -sS https://webi.sh/docker | sh
##

#+end_src

* git
#+begin_src zsh :eval never
git config --global http.proxy http://127.0.0.1:2096
git config --global https.proxy http://127.0.0.1:2096
#+end_src

* pip
#+begin_src zsh :eval never :tangle tangled/bootstrap_minimal.bash
## pip
pip install --upgrade pipx
pipx install speedtest-cli nvitop black
#: nvitop needs the isolated env (?) pipx provides or sth.

pip install -U jupyter jupyterlab py-spy

pip install -U IPython aiofile docopt PySocks telethon python-telegram-bot py-spy
# pip install -U pynight
##

#+end_src

* apt
:PROPERTIES:
:ID:       9950dc25-c88f-4660-b059-6302af531c03
:END:
#+begin_example zsh
sudo apt-get update
sudo apt-get install -y kitty-terminfo coreutils moreutils htop ncdu vim neovim git curl wget build-essential tmux zsh openconnect jq python3 python3-pip bindfs socat nmap corkscrew connect-proxy net-tools netcat-openbsd openssh-client openssh-server autossh redis-server zstd ripgrep progress

# redis-install
#+end_example

* junest
- @from [[id:eda140aa-85af-4304-a744-04dc77d7290d][@install junest]]
  
#+begin_src zsh :eval never :tangle tangled/bootstrap_with_proxy.zsh
function junest-install {
(
    export PS4='> '
    setopt LOCAL_OPTIONS PIPE_FAIL PRINT_EXIT_VALUE ERR_RETURN SOURCE_TRACE XTRACE 
    setopt TYPESET_SILENT NO_CASE_GLOB multios re_match_pcre extendedglob pipefail interactivecomments hash_executables_only
    ##
    git clone https://github.com/fsquillace/junest.git ~/.local/share/junest
    ##
    export PATH="${HOME}/.local/share/junest/bin:$PATH"
    export PATH="$PATH:${HOME}/.junest/usr/bin_wrappers"
    export JUNEST_HOME="${HOME}/.junest"

    if test -n "${JUNEST_ENV}" ; then
        #: We are already inside junest, so just use the normal sudo.
        alias sudo-junest=sudo
    else
        alias sudo-junest="${HOME}/.junest/usr/bin_wrappers/sudo"
    fi
    ##
    junest setup
    sudo-junest pacman -Syy
)
}

if ! test -e ~/.local/share/junest ; then
    junest-install
fi
#+end_src

** pacman
#+begin_src zsh :eval never :tangle tangled/bootstrap_with_proxy.zsh
sudo-junest pacman -Syy --noconfirm tar gzip gcc zsh ugrep tealdeer progress bandwhich ncdu eza ffmpeg
sudo-junest pacman -Syy --noconfirm openssh

sudo-junest pacman -Syy --noconfirm rust
cargo install rm-improved
# sudo-junest yay -S --noconfirm rm-improved

sudo-junest pacman -Syy --noconfirm socat nodejs npm

sudo-junest pacman -Syy --noconfirm tealdeer
tldr --update

sudo-junest pacman -Syy --noconfirm emacs
#+end_src

#+begin_src zsh :eval never :tangle tangled/bootstrap_with_proxy.zsh
# sudo-junest pacman -Syy --noconfirm redis
#: doesn't seem to work

#: Add to cron:
# tmux new -d -s redis redis-server
#+end_src

* brew
:PROPERTIES:
:ID:       cf6c92c4-bf55-4534-9064-13fb1a80a874
:END:
** [[id:1b697891-c688-4790-9812-2ff60d9e422c][Homebrew/install]]

** @nonRoot
#+begin_example zsh
curl -sS https://webi.sh/brew | sh
#+end_example

Or:
#+begin_example zsh
tmuxnew brew-install zsh -c 'curl -sS https://webi.sh/brew | sh'
#+end_example

** PATH
#+begin_example zsh
export PATH="${PATH}:${HOME}/.local/opt/brew/bin"
#+end_example

** install brew packages
#+begin_src zsh :eval never :tangle tangled/bootstrap_with_proxy.zsh
###
# brew install gcc zsh ugrep tealdeer progress bandwhich ncdu rm-improved eza

# brew install redis
# brew services start redis
###
#+end_src

** [[gid:4fd8da85-fe5e-416c-a8ee-ca5219fd6d69][@install emacs]]
#+begin_src zsh :eval never :tangle tangled/emacs_install.zsh
(
export PS4='> '
setopt PIPE_FAIL PRINT_EXIT_VALUE ERR_RETURN SOURCE_TRACE XTRACE
##

# brew tap d12frosted/emacs-plus
# brew install emacs-plus@29 --without-cocoa

alias gcl='git clone --recursive'
cd ~/

rm -fr ~/.emacs.d ~/doom.d ~/.doom.d || true
gcl https://github.com/hlissner/doom-emacs ~/.emacs.d
gcl https://github.com/NightMachinary/doom.d

ln -s ~/doom.d ~/.doom.d

rehash

#: With `yes` added, hopefully non-interactive
command yes | doom install
doom sync
)
#+end_src

* Caddy
#+begin_example zsh
tmux new -d -s 'serve-dl-caddy' caddy run --config ~/Caddyfile
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap results
reval-ec rsp-safe Caddyfile ubuntu@185.235.42.146:
#+end_src

#+RESULTS:
#+begin_results
rsp-safe Caddyfile ubuntu@185.235.42.146:

            306 100%    0.00kB/s    0:00:00
            306 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=0/1)
            306 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=0/1)
#+end_results

* v2ray
#+begin_example zsh
tmux new -d -s v2ray v2ray -config /usr/local/etc/v2ray/config.json
#+end_example

#+begin_example zsh
sudo cp ~/v2_server.json /usr/local/etc/v2ray/config.json
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap results
# reval-ec rsp-safe ./*.json ubuntu@185.235.42.146:
#+end_src


* borg
#+begin_example zsh
mkdir -p ~/code/
cd ~/code/
# git clone git@github.com:NightMachinery/betterborg.git
git clone https://github.com/NightMachinery/betterborg.git

cd betterborg
pip install -r requirements.txt 
#+end_example

#+begin_example zsh
tmuxnew julia-borg bash -c 'cd ~/code/betterborg/ && borgp=1096 python3 stdborg.py'
#+end_example

* Zsh
** escape codes for hotkeys
*** Make Zsh understand that =^[[1;3C= means =alt + right arrow=.
