--------------

Zsh Coding Guidelines:

- Always use long option/argument forms for CLI commands. This makes the code more readable.

- Some basic functions/aliases are already defined, and should be used if needed:

#+begin_src :eval never
alias -g '@RET'=' || return $?'

function ec {
    #: `ec` should almost always be used instead of `echo`.
    print -r -- "$@"
}

function ecn {
    print -rn -- "$@"
}

function ecerr {
    ec "$@" >&2
}

function gquote {
    ec "${(qq@)@}"
}
alias gq=gquote

function reval {
    eval "$(gquote "$@")"
}

function bool {
    local i=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    if [[ "${i}" == "n" ]] || [[ "${i}" == "no" ]] || [[ "${i}" == "0" ]]
    then
        return 1
    else
        test -n "${i}"
        return $?
    fi
}

function ensure-array {
    local i
    for i in $@ ; do
        if (( ${#${(P)i}} == 0 )) ; then
            typeset -ag "$i"
        fi
    done
}

function trs-rm {
    local paths=("$@")

    local p
    for p in $paths[@] ; do
        if test -e "$p" ; then
            reval-ec command rm -rf -- "$p"
        fi
    done
}
#+end_src

- Functions should be defined in the following form:

#+begin_src :eval never
function fn-name {
  ...
}
#+end_src

- All variables must be declared local unless global access is needed. Even for dependency injection, prefer:

#+begin_src :eval never
local dependency="${dependency:-default_value}"
#+end_src

All env vars (global vars) must be declared local as above, at the start of the function, so that the inputs of the functions are obvious at a glance.

When accessing a global var, we should simplify its local name, e.g.,:

#+begin_src :eval never
function bar {
  local flag_p="${bar_flag_p:-y}"
  ...
}
#+end_src

- Prefer keyword-style argument passing like the above, and keep positional arguments simple and intuitive to use.
- The global name of the keyword arguments should be namespaced to avoid potential conflicts. E.g., =bar_flag_p= above namespaces with =bar_=.
- The order of argument definition matters. E.g.,

#+begin_src :eval never
function ffmpeg-to-audio {
    ...
    local audio_extension="${ffmpeg_audio_extension:-m4a}"
    ...

    local input="${1}"
    local output="${2:-${input:r}.${audio_extension}}"
    ...
}
#+end_src

Notice how we need to first define =audio_extension=, then =output=.

- When the function needs to be passed an array, use this pattern:

#+begin_src :eval never
function ffmpeg-to-video {
    ...
    ensure-array ffmpeg_codec_opts
    local codec_opts=("${ffmpeg_codec_opts[@]}")
    ...
}
#+end_src

- All values should be quoted, including subshells:
#+begin_src zsh :eval never
some_var="$(some_command ...)"
#+end_src

- If we need to quote something that will be evaled later, we should use =gquote=.

- Note that these options are set:

#+begin_src :eval never
setopt multios re_match_pcre extendedglob
#+end_src

If you need to set an option or trap, be sure to use =setopt localoptions= or =setopt localtraps=.

- Idiomatic Zsh should be prefered.

- When in doubt between sed, awk, and perl, always use perl.

- Functions that take a source file and save an output file, should generally use an interface like this:

#+begin_src :eval never
function pdf-compress {
    local input="${1}"
    local out="${2:-${input:r}_compressed.pdf}"

    ...
}
#+end_src

- Function/command calls that might fail should use this pattern:
#+begin_src zsh :eval never
assert mkdir -p x/y @RET
#+end_src

=@RET= is already defined as:
#+begin_src zsh :eval never
alias -g '@RET'=' || return $?'
#+end_src

=assert= is also already defined, and can be treated as a version of =reval= defined above which just re-evaluates its input. The above pattern must only be used when the shell is NOT forking. For subshells, use the following pattern.

- For error handling subshells, use this pattern:
#+begin_src zsh :eval never
local tmp
tmp="$(gmktemp)" @TRET
#+end_src

=@TRET= is already defined as:
#+begin_src zsh :eval never
alias -g '@TRET'=' || { local retcode=$? ; ectrace_single_trace=y ectrace_ret=$retcode ectrace ; return $retcode }'
#+end_src

=@TRET= prints a detailed stacktrace. If the subshell is calling an embedded script with proper error reporting, then we can fall back to =@RET=:
#+begin_src bsh.dash :results verbatim :exports both :wrap results
local out
out="$(perl - "${tmp_file}" <<'EOF'
...
    print STDERR "Error: ...\n";
    exit 1;
...
EOF
)" @RET
#+end_src

- Some commands are okay to fail. You can use these two patterns to handle them:

This pattern ignores the error silently:
#+begin_src zsh :eval never
trs-rm some_temp_file || true
#+end_src

This pattern prints a stacktrace but ignores the error otherwise:
#+begin_src zsh :eval never
trs-rm some_big_file @STRUE
#+end_src

=@STRUE= is already defined:
#+begin_src zsh :eval never
alias -g '@STRUE'=' || { ectrace_single_trace=y ectrace_ret=$? ectrace ; true }'
#+end_src

Prefer silent errors when the error is inconsequential, like when deleting temporary files.

- When parsing structured input, use the appropriate tool with robust parsing, e.g., =jq= for JSON.

- Heredocs must be used for long literal strings. E.g., when we are embedding a script.

- Helper/internal/private functions should be named =h-...=.

- When multiple implementations of a function are possible, name each implementation with a postfix. E.g., =pdf-compress-pdftk=, =pdf-compress-qpdf=. Then define a general gateway =aliasfn pdf-compres pdf-compress-qpdf=. This way, we can easily swap the default implementation used.

- DRY.

- Redis-stored variables:
#+begin_src zsh :eval never
function redis-defvar {
    local name="${1}"

    if test -z "${name}" ; then
        ecerr "$0: name not supplied"
        return 1
    fi

    fndef "${name}_get" redism get "$name"
    aliasfnq "${name}_set" silent redism set "$name"
    aliasfnq "${name}_setnx" silent redism setnx "$name"
    fndef "${name}_del" silent redism del "$name"
}
#+end_src

The above function can be used like this:
#+begin_src zsh :eval never
redis-defvar input_volume_cached

# To set it:
input_volume_cached_set "$vol"

# To set it if it does not exist:
input_volume_cached_setnx "$vol"

# To read it:
input_volume_cached_get

# To delete it:
input_volume_cached_del
#+end_src

The redis-backed variables should be used when some state needs to be shared between multiple shell instances.

- Things that should NOT be dependency-injected unless the user asks explicitly:
  - commands
--------------
