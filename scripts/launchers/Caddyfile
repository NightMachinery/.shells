#
# noise here to stop emacs from thinking this is C code

{
    # experimental_http3
	order webdav after basicauth
}

# doesn't work: http://localhost:8080
# doesn't work:http://82.102.11.148:8080
# works: http://:8080
##
# server listening on [:8080] is configured for HTTP and cannot natively multiplex HTTP and HTTPS
# we also can't redirect from another http port to the https port, see https://caddy.community/t/redirect-http-to-https-on-non-80-and-443-port/5695
# I opened this question: https://caddy.community/t/caddy-doesnt-redirect-from-http-to-https/9163
# http://lilf.ir:8080 {
# redir https://lilf.ir:8080{uri}
# }
www.lilf.ir {
  redir https://lilf.ir{uri}
}

lilf.ir {
  templates
  header Content-Type text/plain
  respond "You see there is nothing here. You're filled with determination.

    Your IP: {{.RemoteIP}}"
}

files.lilf.ir, http://:8080 {
  basicauth /private/* scrypt {
	Alice {env.GARDEN_HASHED0} {env.GARDEN_SALT0_B64}
  }
  basicauth /static/notes/* bcrypt {
	Bunny {env.BUNNY_HASHED}
  }
  encode zstd gzip
  file_server browse {
    hide *..hidden..*
    root {env.HOME}/Downloads
  }
}

sg.lilf.ir {
  encode zstd gzip
  reverse_proxy localhost:7080
}

searx.lilf.ir {
  encode zstd gzip
  reverse_proxy localhost:4004
}

code.lilf.ir {
  # encode zstd gzip
  reverse_proxy localhost:7451
}

notes.lilf.ir {
  encode zstd gzip
  # reverse_proxy localhost:1313
  file_server browse {
    hide *..hidden..*
    root {env.hugo_base_dir}/public
  }
}

https://garden.lilf.ir {
#  @protected /api/*
  basicauth /api/* scrypt {
	Alice {env.GARDEN_HASHED0} {env.GARDEN_SALT0_B64}
  }
  encode zstd gzip

  # file servers are a bit troublesome: https://caddy.community/t/cant-get-browseable-file-server-with-request-matcher-to-work-caddyfile/8055
  ## WebDAVs:
  # webdav /api/webdav/tmp/* {
  # root {env.HOME}/tmp
  # prefix /api/webdav/tmp
  # }
  # webdav /api/webdav/dl/* {
  # root {env.HOME}/Downloads
  # prefix /api/webdav/dl
  # }
  # webdav /api/webdav/notes/* {
  # root {env.HOME}/cellar/notes
  # prefix /api/webdav/notes
  # }
  # webdav /api/webdav/scripts/* {
  # root {env.HOME}/scripts
  # prefix /api/webdav/scripts
  # }
  ##
  respond /api/hi/ "Hello Darkness My Old Friend!"
  #reverse_proxy /api/v1/* localhost:7230
  route /api/v1/* {
	uri strip_prefix /api/v1
	reverse_proxy localhost:7230
  }

  # route /* {
  # this breaks the webdav directives, possibly because of wrong ordering
  #   # uri strip_prefix /organice # organice needs config for being in a prefix, so let's just use the root for it
  #   reverse_proxy localhost:5000
  # }

  respond "pained gold spots accumulated"
}


# org.lilf.ir {
#  encode zstd gzip
#  reverse_proxy localhost:5000
# }

##
# hook.android.lilf.ir:8443 {
android.lilf.ir:8443, api.android.lilf.ir:8443, hook.android.lilf.ir:8443 {
 reverse_proxy localhost:8445
}
# android.lilf.ir:8443, api.android.lilf.ir:8443 {
#  reverse_proxy localhost:8446
# }
##

##
# doesn't work, our only bet is the forward proxy plugin
# :8060 {
#   reverse_proxy https://google.com
# }
##
# (np) {
# 	route {
# 		forward_proxy {
# 			basic_auth alice {$NP_PASS0}
# 			probe_resistance secret.com
# 			hide_ip
# 			hide_via
# 		}
# 		file_server browse {
# 			root {env.HOME}/Downloads
# 		}
# 		# respond "pained gold spots accumulated"
# 		}
# 	}

# 	:443 { # @upstreambug https://caddy.community/t/caddy-suddenly-directs-my-site-to-the-wrong-directive/11597/2
# 		import np
# 	}

# 	np.lilf.ir {
# 		import np
# 	}
##
np.lilf.ir {
	@grpc {
		protocol grpc
		path /sky* # @customizable
        # [[https://caddyserver.com/docs/caddyfile/matchers#path][Request matchers (Caddyfile) â€” Caddy Documentation]]
	}
	reverse_proxy @grpc 127.0.0.1:5131 {
		transport http {
			versions h2c
		}
	}

    file_server browse {
        root {env.HOME}/Downloads
    }
}
##
